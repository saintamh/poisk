# See test_type_checking.py

test_cases:

  ### many.re

  - name: many.re happy path
    expected_error: null
    code: |-
      words = many.re(r'\w+', 'The quick brown fox')
      [w.strip() for w in words]

  - name: many.re returns strings
    expected_error: '"str" has no attribute "not_a_known_str_attribute"'
    code: |-
      words = many.re(r'\w+', 'The quick brown fox')
      [w.not_a_known_str_attribute for w in words]

  - name: many.re requires string needle
    expected_error: No overload variant of "re" matches argument types
    code: |-
      many.re(1, 'The quick brown fox')

  - name: many.re requires non-null needle
    expected_error: No overload variant of "re" matches argument types
    code: |-
      many.re(None, 'The quick brown fox')

  - name: many.re can take a `parse` that maps from str
    expected_error: null
    code: |-
      numbers = many.re(r'\d+', '1 2 3', parse=int)
      [abs(n) for n in numbers]

  - name: many.re with parse=int returns a list of ints
    expected_error: '"int" has no attribute "not_a_known_int_attribute"'
    code: |-
      numbers = many.re(r'\d+', '1 2 3', parse=int)
      [n.not_a_known_int_attribute for n in numbers]

  - name: many.re `parse` must accept str as input
    expected_error: Argument "parse" to "re" has incompatible type
    code: |-
      numbers = many.re(r'\d+', '1 2 3', parse=abs)

  - name: many.re accepts `flags` kwarg
    expected_error: null
    code: |-
      words = many.re(r'[a-z]+', 'The quick brown fox', flags=re.I)

  - name: many.re only accepts `flags` kwarg
    expected_error: No overload variant of "re" matches argument types
    code: |-
      words = many.re(r'[a-z]+', 'The quick brown fox', unknown_kwarg=re.I)


  ### many.re using a compiled pattern

  - name: compiled many.re happy path
    expected_error: null
    code: |-
      words = many.re(re.compile(r'\w+'), 'The quick brown fox')
      [w.strip() for w in words]

  - name: compiled many.re returns strings
    expected_error: '"str" has no attribute "not_a_known_str_attribute"'
    code: |-
      words = many.re(re.compile(r'\w+'), 'The quick brown fox')
      [w.not_a_known_str_attribute for w in words]

  - name: compiled many.re can take a `parse` that maps from str
    expected_error: null
    code: |-
      numbers = many.re(re.compile(r'\d+'), '1 2 3', parse=int)
      [abs(n) for n in numbers]

  - name: compiled many.re with parse=int returns a list of ints
    expected_error: '"int" has no attribute "not_a_known_int_attribute"'
    code: |-
      numbers = many.re(re.compile(r'\d+'), '1 2 3', parse=int)
      [n.not_a_known_int_attribute for n in numbers]

  - name: compiled many.re `parse` must accept str as input
    expected_error: Argument "parse" to "re" has incompatible type
    code: |-
      numbers = many.re(re.compile(r'\d+'), '1 2 3', parse=abs)

  - name: many.re doesn't accept unknown kwargs
    expected_error: No overload variant of "re" matches argument types
    code: |-
      words = many.re(re.compile(r'[a-z]+'), 'The quick brown fox', unknown_kwarg=re.I)


  ### many.etree

  - name: many.etree happy path
    expected_error: null
    code: |-
      titles = many.etree('/h1', lxml.etree.fromstring('<h1>Title!</h1>'))
      print([t.text for t in titles])

  - name: many.etree returns a list of elements
    expected_error: '"_Element" has no attribute "not_a_known_element_attribute"'
    code: |-
      titles = many.etree('/h1', lxml.etree.fromstring('<h1>Title!</h1>'))
      print([t.not_a_known_element_attribute for t in titles])

  - name: many.etree needle must be str
    expected_error: No overload variant of "etree" matches argument types
    code: |-
      many.etree(1, lxml.etree.fromstring('<h1>Title!</h1>'))

  - name: many.etree needle must be non-null
    expected_error: No overload variant of "etree" matches argument types
    code: |-
      many.etree(None, lxml.etree.fromstring('<h1>Title!</h1>'))

  - name: many.etree accepts a `parse` that accepts XPathResult as input
    expected_error: null
    code: |-
      titles = many.etree('h1/text()', lxml.etree.fromstring('<h1>Title!</h1>'), parse=str)
      print([t.upper() for t in titles])

  - name: many.etree accepts an int `parse`
    expected_error: null
    code: |-
      ids = many.etree('a/@id', lxml.etree.fromstring('<a id="5" />'), parse=int)
      print([10 ** i for i in ids])

  - name: many.etree with parse returns a list of that type
    expected_error: '"str" has no attribute "not_a_known_str_attribute"'
    code: |-
      titles = many.etree('h1/text()', lxml.etree.fromstring('<h1>Title!</h1>'), parse=str)
      print([t.not_a_known_str_attribute for t in titles])

  - name: many.etree `parse` must accept XPathResult as input
    expected_error: Argument "parse" to "etree" has incompatible type
    code: |-
      many.etree('h1/text()', lxml.etree.fromstring('<h1>Title!</h1>'), parse=abs)


  ### many.pods

  - name: many.pods has a `type` that defines the return type
    expected_error: null
    code: |-
      numbers = many.pods('x[]', {'x': [1, 2]}, type=int)
      i: int = abs(numbers[0])

  - name: many.pods requires string needle
    expected_error: No overload variant of "pods" matches argument types
    code: |-
      many.pods(1, {'x': [1, 2]})

  - name: many.pods requires non-null needle
    expected_error: No overload variant of "pods" matches argument types
    code: |-
      many.pods(None, {'x': [1, 2]})

  - name: many.pods can take a `parse` that maps from object
    expected_error: null
    code: |-
      strings = many.pods('x[]', {'x': [1, 2]}, str)
      [s.strip() for s in strings]

  - name: many.pods `parse` must accept the `type`
    expected_error: incompatible type "Callable[[int], str]"; expected "Callable[[float], str]"
    code: |-
      numbers = many.pods('x[]', {'x': [97.0, 98.9]}, type=float, parse=chr)

  - name: many.pods `parse` works if it accepts the given `type`
    expected_error: null
    code: |-
      numbers = many.pods('x[]', {'x': [97, 98]}, type=int, parse=chr)

  - name: many.pods accepts no kwarg
    expected_error: No overload variant of "pods" matches argument types
    code: |-
      many.pods(1, {'x': [1, 2]}, unknown_kwarg='blah')

  - name: many.pods accepts the output of json.loads
    expected_error: null
    code: |-
      import json
      numbers = many.pods('x[]', json.loads('{"x": [1, 2]}'), type=int)
      [abs(i) for i in numbers]


  ### many.filter

  - name: many.filter happy path
    expected_error: null
    code: |-
      import math
      def is_even(number: int) -> bool:
        return number % 2 == 0
      even = many.filter(is_even, range(10))
      list(map(math.log, even))

  - name: many.filter works with any iterable
    expected_error: null
    code: |-
      import math
      from typing import Iterable

      class MyIterable(Iterable[int]):
        def __iter__(self):
          yield 1
          yield 2
          yield 3

      def is_even(number: int) -> bool:
        return number % 2 == 0

      even = many.filter(is_even, MyIterable())
      list(map(math.log, even))

  - name: many.filter can take a `parse` that maps to a different type
    expected_error: null
    code: |-
      from pathlib import Path
      from typing import Iterable

      class MyIterable(Iterable[int]):
        def __iter__(self):
          yield 1
          yield 2
          yield 3

      def is_even(number: int) -> bool:
        return number % 2 == 0

      def as_path(number: int) -> Path:
        return Path(str(number))

      even_paths = many.filter(is_even, MyIterable(), parse=as_path)
      [p.glob('*') for p in even_paths]

  - name: many.filter accepts no kwargs
    expected_error: No overload variant of "filter" matches argument types
    code: |-
      many.filter(lambda i: i % 2 == 0, range(10), unknown_kwarg=True)

  - name: many.filter accepts no kwargs when there's a parse method, either
    expected_error: No overload variant of "filter" matches argument types
    code: |-
      many.filter(lambda i: i % 2 == 0, range(10), parse=str, unknown_kwarg=True)


  ### one.re

  - name: one.re happy path
    expected_error: null
    code: |-
      one.re(r'\w+', 'Hello!').strip()

  - name: one.re returns a string
    expected_error: '"str" has no attribute "not_a_known_str_attribute"'
    code: |-
      one.re(r'\w+', 'Hello!').not_a_known_str_attribute

  - name: one.re with allow_mismatch=True returns an Optional[str]
    expected_error: Item "None" of "Optional[str]" has no attribute "strip"
    code: |-
      one.re(r'\w+', 'Hello!', allow_mismatch=True).strip()

  - name: one.re requires string needle
    expected_error: No overload variant of "re" matches argument types
    code: |-
      one.re(1, 'The quick brown fox')

  - name: one.re requires non-null needle
    expected_error: No overload variant of "re" matches argument types
    code: |-
      one.re(None, 'The quick brown fox')

  - name: one.re can take a `parse` that maps from str
    expected_error: null
    code: |-
      abs(one.re(r'\d+', 'abcd 123', parse=int))

  - name: one.re with parse=int returns an int
    expected_error: '"int" has no attribute "not_a_known_int_attribute"'
    code: |-
      one.re(r'\d+', 'abcd 123', parse=int).not_a_known_int_attribute

  - name: one.re with `parse=int` and `allow_mismatch=True` returns an Optional[int]
    expected_error: incompatible type "Optional[SupportsAbs[int]]"; expected "SupportsAbs[int]
    code: |-
      abs(one.re(r'\d+', 'abcd 123', parse=int, allow_mismatch=True))

  - name: one.re `parse` must accept str as input
    expected_error: Argument "parse" to "re" has incompatible type
    code: |-
      one.re(r'\d+', 'abcd 123', parse=abs)

  - name: one.re accepts `flags` kwarg
    expected_error: null
    code: |-
      one.re(r'[a-z]+', 'Hello!', flags=re.I)

  - name: one.re only accepts `flags` kwarg
    expected_error: No overload variant of "re" matches argument types
    code: |-
      one.re(r'[a-z]+', 'Hello!', unknown_kwarg=re.I)


  ### one.re using a compiled pattern

  - name: compiled one.re happy path
    expected_error: null
    code: |-
      one.re(re.compile(r'\w+'), 'Hello!').strip()

  - name: compiled one.re returns a string
    expected_error: '"str" has no attribute "not_a_known_str_attribute"'
    code: |-
      one.re(re.compile(r'\w+'), 'Hello!').not_a_known_str_attribute

  - name: compiled one.re with allow_mismatch=True returns an Optional[str]
    expected_error: Item "None" of "Optional[str]" has no attribute "strip"
    code: |-
      one.re(re.compile(r'\w+'), 'Hello!', allow_mismatch=True).strip()

  - name: compiled one.re can take a `parse` that maps from str
    expected_error: null
    code: |-
      abs(one.re(re.compile(r'\d+'), 'abcd 123', parse=int))

  - name: compiled one.re with parse=int returns an int
    expected_error: '"int" has no attribute "not_a_known_int_attribute"'
    code: |-
      one.re(re.compile(r'\d+'), 'abcd 123', parse=int).not_a_known_int_attribute

  - name: compiled one.re with `parse=int` and `allow_mismatch=True` returns an Optional[int]
    expected_error: incompatible type "Optional[SupportsAbs[int]]"; expected "SupportsAbs[int]
    code: |-
      abs(one.re(re.compile(r'\d+'), 'abcd 123', parse=int, allow_mismatch=True))

  - name: compiled one.re `parse` must accept str as input
    expected_error: Argument "parse" to "re" has incompatible type
    code: |-
      one.re(re.compile(r'\d+'), 'abcd 123', parse=abs)

  - name: one.re doesn't accept unknown kwargs
    expected_error: No overload variant of "re" matches argument types
    code: |-
      one.re(re.compile(r'[a-z]+'), 'Hello!', unknown_kwarg=re.I)


  ### one.etree

  - name: one.etree happy path
    expected_error: null
    code: |-
      one.etree('/h1', lxml.etree.fromstring('<h1>Title!</h1>')).text

  - name: one.etree returns an Element
    expected_error: '"_Element" has no attribute "not_a_known_element_attribute"'
    code: |-
      one.etree('/h1', lxml.etree.fromstring('<h1>Title!</h1>')).not_a_known_element_attribute

  - name: one.etree with allow_mismatch=True returns an Optional[Element]
    expected_error: '"Optional[_Element]" has no attribute "text"'
    code: |-
      one.etree('/h1', lxml.etree.fromstring('<h1>Title!</h1>'), allow_mismatch=True).text

  - name: one.etree needle must be str
    expected_error: No overload variant of "etree" matches argument types
    code: |-
      one.etree(1, lxml.etree.fromstring('<h1>Title!</h1>'))

  - name: one.etree needle must be non-null
    expected_error: No overload variant of "etree" matches argument types
    code: |-
      one.etree(None, lxml.etree.fromstring('<h1>Title!</h1>'))

  - name: one.etree accepts a `parse` that accepts XPathResult as input
    expected_error: null
    code: |-
      one.etree('h1/text()', lxml.etree.fromstring('<h1>Title!</h1>'), parse=str).upper()

  - name: one.etree accepts a `parse` that accepts XPathResult as input, with allow_mismatch=True becomes optional
    expected_error: '"Optional[str]" has no attribute "upper"'
    code: |-
      one.etree('h1/text()', lxml.etree.fromstring('<h1>Title!</h1>'), parse=str, allow_mismatch=True).upper()

  - name: one.etree accepts an int `parse`
    expected_error: null
    code: |-
      abs(one.etree('a/@id', lxml.etree.fromstring('<a id="5" />'), parse=int))

  - name: one.etree accepts an int `parse`, with allow_mismatch=True becomes optional
    expected_error: incompatible type "Optional[SupportsAbs[int]]"; expected "SupportsAbs[int]"
    code: |-
      abs(one.etree('a/@id', lxml.etree.fromstring('<a id="5" />'), parse=int, allow_mismatch=True))

  - name: one.etree `parse` must accept XPathResult as input
    expected_error: Argument "parse" to "etree" has incompatible type
    code: |-
      one.etree('h1/text()', lxml.etree.fromstring('<h1>Title!</h1>'), parse=abs)


  ### one.attrib

  - name: one.attrib happy path
    expected_error: null
    code: |-
      one.attrib('id', lxml.etree.fromstring('<h1 id="one">Title!</h1>')).strip()

  - name: one.attrib returns a string
    expected_error: '"str" has no attribute "not_a_known_str_attribute"'
    code: |-
      one.attrib('id', lxml.etree.fromstring('<h1 id=one">Title!</h1>')).not_a_known_str_attribute

  - name: one.attrib with allow_mismatch=True returns an Optional[str]
    expected_error: '"Optional[str]" has no attribute "strip"'
    code: |-
      one.attrib('id', lxml.etree.fromstring('<h1 id="one">Title!</h1>'), allow_mismatch=True).strip()

  - name: one.attrib needle must be str
    expected_error: No overload variant of "attrib" matches argument types
    code: |-
      one.attrib(1, lxml.etree.fromstring('<h1 id="one">Title!</h1>'))

  - name: one.attrib needle must be non-null
    expected_error: No overload variant of "attrib" matches argument types
    code: |-
      one.attrib(None, lxml.etree.fromstring('<h1 id="one">Title!</h1>'))

  - name: one.attrib accepts a `parse` that accepts a str as input
    expected_error: null
    code: |-
      abs(one.attrib('id', lxml.etree.fromstring('<h1 id=1>Title!</h1>'), int))


  ### one.pods

  - name: one.pods has a `type` that defines the return type
    expected_error: null
    code: |-
      number = one.pods('x[]', {'x': [1]}, type=int)
      i: int = abs(number)

  - name: one.pods requires string needle
    expected_error: No overload variant of "pods" matches argument types
    code: |-
      one.pods(1, {'x': [1, 2]})

  - name: one.pods requires non-null needle
    expected_error: No overload variant of "pods" matches argument types
    code: |-
      one.pods(None, {'x': [1, 2]})

  - name: one.pods can take a `parse` that maps from object
    expected_error: null
    code: |-
      one.pods('x', {'x': [1]}, str).strip()

  - name: one.pods `parse` must accept the `type`
    expected_error: incompatible type "Callable[[int], str]"; expected "Callable[[float], str]"
    code: |-
      number = one.pods('x[]', {'x': [97.0]}, type=float, parse=chr)

  - name: one.pods `parse` works if it accepts the given `type`
    expected_error: null
    code: |-
      number = one.pods('x[]', {'x': [97]}, type=int, parse=chr)

  - name: one.pods accepts no kwarg
    expected_error: No overload variant of "pods" matches argument types
    code: |-
      one.pods(1, {'x': [1, 2]}, unknown_kwarg='blah')

  - name: one.pods accepts the output of json.loads
    expected_error: null
    code: |-
      import json
      number = one.pods('x', json.loads('{"x": 1}'), type=int)
      print(abs(number))


  ### one.filter

  - name: one.filter happy path
    expected_error: null
    code: |-
      import math
      def is_even(number: int) -> bool:
        return number % 2 == 0
      math.log(one.filter(is_even, [1, 2, 3]))

  - name: one.filter with allow_mismatch=True returns an Optional
    expected_error: incompatible type "Optional[int]"; expected "SupportsFloat"
    code: |-
      import math
      def is_even(number: int) -> bool:
        return number % 2 == 0
      two = one.filter(is_even, [1, 2, 3], allow_mismatch=True)
      math.log(two)

  - name: one.filter works with any iterable
    expected_error: null
    code: |-
      import math
      from typing import Iterable

      class MyIterable(Iterable[int]):
        def __iter__(self):
          yield 1
          yield 2
          yield 3

      def is_even(number: int) -> bool:
        return number % 2 == 0

      math.log(one.filter(is_even, MyIterable()))

  - name: one.filter can take a `parse` that maps to a different type
    expected_error: null
    code: |-
      from pathlib import Path
      from typing import Iterable

      class MyIterable(Iterable[int]):
        def __iter__(self):
          yield 1
          yield 2
          yield 3

      def is_even(number: int) -> bool:
        return number % 2 == 0

      def as_path(number: int) -> Path:
        return Path(str(number))

      one.filter(is_even, MyIterable(), parse=as_path).glob('*')

  - name: one.filter wirh `parse` and allow_mismatch=True returns an Optional
    expected_error: '"Optional[Path]" has no attribute "glob"'
    code: |-
      from pathlib import Path
      from typing import Iterable

      class MyIterable(Iterable[int]):
        def __iter__(self):
          yield 1
          yield 2
          yield 3

      def is_even(number: int) -> bool:
        return number % 2 == 0

      def as_path(number: int) -> Path:
        return Path(str(number))

      one.filter(is_even, MyIterable(), parse=as_path, allow_mismatch=True).glob('*')

  - name: one.filter accepts no kwargs
    expected_error: No overload variant of "filter" matches argument types
    code: |-
      def is_even(number: int) -> bool:
        return number % 2 == 0
      one.filter(is_even, range(10), unknown_kwarg=True)

  - name: one.filter accepts no kwargs when there's a parse method, either
    expected_error: No overload variant of "filter" matches argument types
    code: |-
      def is_even(number: int) -> bool:
        return number % 2 == 0
      one.filter(is_even, range(10), parse=str, unknown_kwarg=True)
